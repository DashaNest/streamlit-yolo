import streamlit as st
import requests
from PIL import Image
import base64
import io

st.title("üéØ YOLOv5 –î–µ—Ç–µ–∫—Ç–æ—Ä —Å FastAPI")

# URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ê–º–≤–µ—Ä–µ
API_URL = "https://fastapi-yolo-darianest.amvera.io"

def image_to_base64(image):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
    buffer = io.BytesIO()
    image.save(buffer, format="JPEG")
    return base64.b64encode(buffer.getvalue()).decode()

def call_detection_api(image, confidence):
    """–í—ã–∑–æ–≤ API –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        image_base64 = image_to_base64(image)
        
        payload = {
            "image": image_base64,
            "confidence": confidence
        }
        
        response = requests.post(
            f"{API_URL}/detect_base64",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    try:
        health_response = requests.get(f"{API_URL}/health", timeout=5)
        if health_response.status_code == 200:
            health_data = health_response.json()
            if health_data.get("model_loaded"):
                st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                st.warning("‚ö†Ô∏è API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        st.error("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
    
    confidence = st.sidebar.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.1, 1.0, 0.5, 0.05)
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=['png', 'jpg', 'jpeg'])
    
    if uploaded_file:
        image = Image.open(uploaded_file).convert('RGB')
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–û—Ä–∏–≥–∏–Ω–∞–ª")
            st.image(image, use_container_width=True)
        
        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
                result = call_detection_api(image, confidence)
                
                if result:
                    with col2:
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result_image_base64 = result.get("result_image")
                        if result_image_base64:
                            result_image_bytes = base64.b64decode(result_image_base64)
                            result_image = Image.open(io.BytesIO(result_image_bytes))
                            st.image(result_image, use_container_width=True)
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
                    detections = result.get("detections", [])
                    total_objects = result.get("total_objects", 0)
                    
                    if total_objects > 0:
                        st.subheader(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_objects}")
                        for detection in detections:
                            st.write(f"‚Ä¢ {detection['class_name']}: {detection['confidence']:.2f}")
                    else:
                        st.write("–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()
