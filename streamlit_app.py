import streamlit as st
import requests
from PIL import Image
import base64
import io

st.set_page_config(
    page_title="YOLOv5 –î–µ—Ç–µ–∫—Ç–æ—Ä",
    page_icon="üéØ",
    layout="wide"
)

st.title("üéØ YOLOv5 –î–µ—Ç–µ–∫—Ç–æ—Ä —Å FastAPI")

# URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ê–º–≤–µ—Ä–µ
API_URL = "https://fastapi-yolo-darianest.amvera.io"

def image_to_base64(image):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
    try:
        buffer = io.BytesIO()
        image.save(buffer, format="JPEG")
        return base64.b64encode(buffer.getvalue()).decode()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def call_detection_api(image, confidence):
    """–í—ã–∑–æ–≤ API –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        image_base64 = image_to_base64(image)
        if not image_base64:
            return None
        
        payload = {
            "image": image_base64,
            "confidence": confidence
        }
        
        response = requests.post(
            f"{API_URL}/detect_base64",
            json=payload,
            timeout=60
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            st.error(f"–î–µ—Ç–∞–ª–∏: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        st.error("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
        return None
    except requests.exceptions.ConnectionError:
        st.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None
    except Exception as e:
        st.error(f"üêõ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        health_response = requests.get(f"{API_URL}/health", timeout=10)
        if health_response.status_code == 200:
            health_data = health_response.json()
            if health_data.get("model_loaded"):
                st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            else:
                st.warning("‚ö†Ô∏è API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return False
        else:
            st.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {health_response.status_code})")
            return False
    except requests.exceptions.Timeout:
        st.error("‚è±Ô∏è API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)")
        return False
    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return False

def main():
    # Sidebar —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.subheader("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        st.text(f"API URL: {API_URL}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API"):
            check_api_health()
        
        confidence = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.1, 1.0, 0.5, 0.05)
        
        st.markdown("---")
        st.markdown("**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**")
        st.markdown("‚Ä¢ PNG, JPG, JPEG")
        st.markdown("‚Ä¢ –†–∞–∑–º–µ—Ä –¥–æ 200MB")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    uploaded_file = st.file_uploader(
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
        type=['png', 'jpg', 'jpeg'],
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤"
    )
    
    if uploaded_file:
        try:
            image = Image.open(uploaded_file).convert('RGB')
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("üì∏ –û—Ä–∏–≥–∏–Ω–∞–ª")
                st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                st.caption(f"–†–∞–∑–º–µ—Ä: {image.size[0]}x{image.size[1]} –ø–∏–∫—Å–µ–ª–µ–π")
            
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type="primary"):
                with st.spinner("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."):
                    result = call_detection_api(image, confidence)
                    
                    if result:
                        with col2:
                            st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç")
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            result_image_base64 = result.get("result_image")
                            if result_image_base64:
                                try:
                                    result_image_bytes = base64.b64decode(result_image_base64)
                                    result_image = Image.open(io.BytesIO(result_image_bytes))
                                    st.image(result_image, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
                        detections = result.get("detections", [])
                        total_objects = result.get("total_objects", 0)
                        
                        if total_objects > 0:
                            st.subheader(f"üéØ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {total_objects}")
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            for i, detection in enumerate(detections, 1):
                                col_icon, col_info = st.columns([1, 4])
                                with col_icon:
                                    st.write(f"**{i}.**")
                                with col_info:
                                    confidence_percent = detection['confidence'] * 100
                                    st.write(f"**{detection['class_name']}** - {confidence_percent:.1f}%")
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox
                                    bbox = detection.get('bbox', {})
                                    if bbox:
                                        st.caption(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({bbox.get('x1', 0):.0f}, {bbox.get('y1', 0):.0f}) - ({bbox.get('x2', 0):.0f}, {bbox.get('y2', 0):.0f})")
                        else:
                            st.info("üîç –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.")
                            
                    else:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç API")
                            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API", expanded=False):
            st.write("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
            api_status = check_api_health()
            if api_status:
                st.write("API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ")
            else:
                st.write("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚ö†Ô∏è")

if __name__ == "__main__":
    main()
